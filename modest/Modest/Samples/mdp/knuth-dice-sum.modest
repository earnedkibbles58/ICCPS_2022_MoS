// Modest MDP model of using Knuth's algorithm to simulate a die using only fair coins for two dice
// mcsta knuth-dice-sum.modest
// modes knuth-dice-sum.modest -M MDP -R Uniform
int(0..10) value;
int(0..2) done;

property Term = Pmin(<> (done == 2)) == 1;
property P2   = Pmax(<> (done == 2 && value ==  0));
property P3   = Pmax(<> (done == 2 && value ==  1));
property P4   = Pmax(<> (done == 2 && value ==  2));
property P5   = Pmax(<> (done == 2 && value ==  3));
property P6   = Pmax(<> (done == 2 && value ==  4));
property P7   = Pmax(<> (done == 2 && value ==  5));
property P8   = Pmax(<> (done == 2 && value ==  6));
property P9   = Pmax(<> (done == 2 && value ==  7));
property P10  = Pmax(<> (done == 2 && value ==  8));
property P11  = Pmax(<> (done == 2 && value ==  9));
property P12  = Pmax(<> (done == 2 && value == 10));

process SimulatedDie(int(0..7) state)
{
	alt {
	::	when(state == 0) palt { :1: {= state = 1 =}  :1: {= state = 2 =} }
	::	when(state == 1) palt { :1: {= state = 3 =}  :1: {= state = 4 =} }
	::	when(state == 2) palt { :1: {= state = 5 =}  :1: {= state = 6 =} }
	::	when(state == 3) palt { :1: {= state = 1 =}  :1: {= state = 7, done += 1 =} }
	::	when(state == 4) palt { :1: {= state = 7, value += 1, done += 1 =}  :1: {= state = 7, value += 2, done += 1 =} }
	::	when(state == 5) palt { :1: {= state = 7, value += 3, done += 1 =}  :1: {= state = 7, value += 4, done += 1 =} }
	::	when(state == 6) palt { :1: {= state = 2 =}  :1: {= state = 7, value += 5, done += 1 =} }
	};
	SimulatedDie(state)
}

par {
::	SimulatedDie(0)
::	SimulatedDie(0)
}