// Modest MA model of the Andresen attack on Bitcoin as presented in
// Ansgar Fehnker and Kaylash Chaudhary:
// Twenty Percent and a Few Days - Optimising a Bitcoin Majority Attack.
// 10th NASA Formal Methods Symposium, Newport News, VA, USA, April 17-19, 2018.
// 
// Fig. 3:
// To obtain the expected duration of an attack with a truly optimal strategy (in file bitcoin-attack.results.txt) as well as that optimal strategy (in file bitcoin-attack.scheduler.txt):
// mcsta bitcoin-attack.modest -S Memory -E "MALICIOUS=0.1,CD=6" -E "MALICIOUS=0.2,CD=6" -E "MALICIOUS=0.3,CD=6" -E "MALICIOUS=0.4,CD=6" -E "MALICIOUS=0.5,CD=6" -O bitcoin-attack.results.txt --scheduler bitcoin-attack.scheduler.txt

const real MALICIOUS; // percentage of hash rate in malicious pool
const int CD; // confirmation depth
const int DIFF_BOUND = CD; // malicious pool always resets when it gets this far behind

action sln; // a solution was found by the honest pool
action rst, cnt; // the malicious pool resets or continues its fork

int(0..CD) m_len = 0; // length of the malicious chain (up to confirmation depth)
int(-DIFF_BOUND..CD) m_diff = 0; // length of malicious chain minus length of honest chain
transient int(0..1) round = 0; // 1 when a new solution was found, 0 on all other steps

// Minimum expected time until the malicious pool wins
// (minimisation corresponds to optimal strategy)
property T_MWinMin = Xmin(T, m_len >= CD && m_diff > 0);

// Maximum probability that the malicious pool wins within 0..10000 rounds
// (maximisation corresponds to optimal strategy)
property P_MWinMax = Pmax(<>[S(round)<=10000] (m_len >= CD && m_diff > 0));

process HonestPool()
{
   rate((1 / 12) * (1 - MALICIOUS)) tau; sln; // honest chain extended
   HonestPool()
}

process MaliciousPool()
{
   alt {
   :: rate((1 / 12) * MALICIOUS) {= m_len = min(CD, m_len + 1), m_diff = min(CD, m_diff + 1), round = 1 =} // malicious fork extended
   :: sln {= m_diff = max(-DIFF_BOUND, m_diff - 1), round = 1 =}; // honest chain extended
      alt { // strategy choice: reset or continue malicious fork
      :: rst {= m_len = 0, m_diff = 0 =}
      :: when(m_diff > -DIFF_BOUND) cnt
      }
   };
   MaliciousPool()
}

par {
:: HonestPool()
:: MaliciousPool()
}
